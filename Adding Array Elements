Given an array arr[] and an integer K, you have to Add the first two minimum elements of the array until all the elements are greater than or equal to K and find the number of such operations required. 

Examples:

Input : arr[] = {1 10 12 9 2 3}
          K = 6
Output : 2
First we add (1 + 2), now the new list becomes 
3 10 12 9 3, then we add (3 + 3),  now the new 
list becomes 6 10 12 9, Now all the elements in 
the list are greater than 6. Hence the output is 
2 i:e 2 operations are required 
to do this. 
Input :  The first line of input contains an integer T denoting the Test cases. Then T test cases follow.  Second line contains no. of array elements - N and K Third line array elements A[i] 

Output : 
Print number of operations required. If it is not possible to make elements greater than or equal to K, print "-1".

Constraints :
1 ≤ T ≤ 50
1 ≤ N, K ≤ 10^5
1 ≤ A[i] ≤ 10^6

Input : 
2
6 6
1 10 12 9 2 3
5 15
1 2 1 2 2
Output : 
2
-1

 
#include<bits/stdc++.h>
using namespace std;
int main()
 {
	int t;
	cin>>t;
	while(t--)
	{
	    int n,k;
	    cin>>n>>k;
	    long long int sum=0;
	    priority_queue<int,vector<int>,greater<int> > pq;
	  int count=0,flag=0;  
	  for(int i=0;i<n;i++)
	    {
	        int x;
	        cin>>x;
	        pq.push(x);
	        sum=sum+x;
	    }
	    if(k<=pq.top())
	    {
	        cout<<"0"<<endl;
	        continue;
	    }
	   
	    else
	    {
	   while(pq.size()>1)
	   {
	       int x=pq.top();
	       pq.pop();
	        if(x>=k)
	        {
	           flag=1;
	           break;  
	        }
	       int y=pq.top();
	       pq.pop();
	       int res=x+y;
	       count++;
	       pq.push(res);
	       if(y>=k)
	       {
	           flag=1;
	           break;
	       }
	       
	   }
	    if(flag)
	  cout<<count<<endl;  
	else
	cout<<"-1"<<endl;
	    }
	}
	return 0;
}
