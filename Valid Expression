Given a string S, composed of different combinations of '(' , ')', '{', '}', '[', ']'. The task is to verify the validity of the arrangement.
Note: Ignore the precedence of brackets.

Example 1:

Input:
S = ()[]{}
Output: 1
Explanation: The arrangement is valid.
 

Example 2:

Input:
S = ())({}
Output: 0
Explanation: Arrangement is not valid.
 

Your Task:  
You dont need to read input or print anything. Complete the function valid() which takes S as input and returns a boolean value denoting whether the arrangement is valid or not.


Expected Time Complexity: O(N) where N is the length of S.
Expected Auxiliary Space: O(N) 


Constraints:
1 <= N <= 10^4


// { Driver Code Starts
#include<bits/stdc++.h>
using namespace std;
bool valid(string str);
int main()
{
    int t;
    cin>>t;
    cin.ignore();
    while(t--)
    {
        string str;
        getline(cin,str);
        cout<<valid(str)<<endl;
    }
    return 0;
}// } Driver Code Ends


bool valid(string s)
{
    stack<char> res;
    for(int i=0;i<s.length();i++)
    {
 if( ( s[i]==')'  && res.size()==0 ) || (s[i]=='}' && res.size()==0 ) ||  (
     s[i]==']' && res.size()==0 )  )
           return false;
         
else if( (s[i]==')' && res.top()=='(' ) || (s[i]=='}' && res.top()=='{' ) ||
(s[i]==']' && res.top()=='[') )
  res.pop();
  else if((s[i]==')' && res.top()!='(' ) || (s[i]==']' && res.top()!='[') || (s[i]=='}' &&
           res.top()!='{') )  
    return false;
    
    else
      res.push(s[i]);
               
        
    }
    
    
    if(res.empty())
    return true;
      else
      return false;
       
      
    
}
