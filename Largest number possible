Given two numbers 'N' and 'S' , find the largest number that can be formed with 'N' digits and whose sum of digits should be equals to 'S'.

Example 1:

Input: N = 2, S = 9
Output: 90
Explaination: It is the biggest number 
with sum of digits equals to 9.
Example 2:

Input: N = 3, S = 20
Output: 992
Explaination: It is the biggest number 
with sum of digits equals to 20.
Your Task:
You do not need to read input or print anything. Your task is to complete the function findLargest() which takes N and S as input parameters and returns the largest possible number. Return -1 if no such number is possible.

Expected Time Complexity: O(N)
Exepcted Auxiliary Space: O(N)

Constraints:
1 ≤ N ≤ 104
1 ≤ S ≤ 105
// { Driver Code Starts
// Initial Template for C++

#include <bits/stdc++.h>
using namespace std;

 // } Driver Code Ends


// User function Template for C++

class Solution{
public:
    string findLargest(int N, int S){
        string sum;
        int pos=S;
        int pos1=0;
       if(N>1 && S==0)
       {
           sum="-1";
           return sum;
       }
       
       else if(N==1 && S==0)
        {
            sum="0";
            return sum;
        }
        else 
        {
        while(sum.size()<N)
        {
            if(S>=9)
            {
                S=S-9;
                pos1=pos1+9;
                sum.push_back('9');
                
            }
            else 
            {
              pos1=pos1+S;
               string s1=to_string(S);
                sum=sum+s1;
            S=0;
            }
        }
       
        }
        
         if(pos1==pos)
        return sum;
        else
        {
            sum="-1";
            return sum;
        }
    }
};

// { Driver Code Starts.

int main(){
    int t;
    cin>>t;
    while(t--){
        int N, S;
        cin>>N>>S;
        
        Solution ob;
        cout<<ob.findLargest(N, S)<<"\n";
    }
    return 0;
}  // } Driver Code Ends
