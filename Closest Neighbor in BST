Given a binary search tree and a number N. Your task is to complete the function findMaxforKey(), that find's the greatest number in the binary search tree that is less than or equal to N. Print the value of the element if it exists otherwise print -1.


Input : N = 24
Output :result = 21
(searching for 24 will be like-5->12->21)

Input  : N = 4
Output : result = 3
(searching for 4 will be like-5->2->3)
Input:
The function takes two argument as input, the reference pointer to the root of the binary search tree and integer value N.
There will be T, test cases and for each test case the function will be called separately.

Output:
For each test case print the greatest number in the binary search tree that is less than or equal to N

Constraints:
1<=T<=100
1<=N<=103

Example:
Input:
2
5
5 1 3 7 9
8
9
5 2 1 3 12 9 21 19 25
4
Output:
7
3
// { Driver Code Starts
//Initial Template for C++
#include <bits/stdc++.h>
using namespace std;

struct Node
{
	int key;
	struct Node *left;
	struct Node *right;
	
	Node(int x){
	    key = x;
	    left = NULL;
	    right = NULL;
	}
};


void insert(Node ** tree, int val)
{
    Node *temp = NULL;
    if(!(*tree))
    {
        temp = new Node(val);
        *tree = temp;
        return;
    }

    if(val < (*tree)->key)
    {
        insert(&(*tree)->left, val);
    }
    else if(val > (*tree)->key)
    {
        insert(&(*tree)->right, val);
    }

}


int mini=INT_MAX;
int findMaxForN(Node* root, int N,int size);


int main()
{
    int T;
    cin>>T;
    while(T--)
    {
        Node* root=NULL;
        int n, k;
        cin>>n;
        mini=INT_MAX;
        for(int i=0;i<n;i++)
        {
            cin>>k;
            insert(&root, k);
        }
        int s;
        cin>>s;
     
       cout<<findMaxForN(root,s,n)<<endl;
         
    }
    return 0;
}// } Driver Code Ends


//User function Template for C++
/*
Structure of the Node of the BST is as
struct Node {
	int key;
	Node* left, *right;
};
*/
/*
   'N' is the element 
   'size' is the total element in BST
  */
int maxi=-1;
void fun(Node *root,int N)
{
    if(root==NULL)
    return;
    fun(root->left,N);
    
    if(root->key<=N)
    {
       maxi= max(maxi,root->key);
    }
    
    fun(root->right,N);
    
  
}

  
int findMaxForN(Node* root, int N,int size)
{
     maxi=-1;
     fun(root,N);
     
    return maxi;
}
