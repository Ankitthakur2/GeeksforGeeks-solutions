Given an adjacency list of a graph adj  of V no. of vertices having 0 based index. Check whether the graph is bipartite or not.
 

Example 1:

Input: 

Output: 1
Explanation: The given graph can be colored 
in two colors so, it is a bipartite graph.
Example 2:

Input:

Output: 0
Explanation: The given graph cannot be colored 
in two colors such that color of adjacent 
vertices differs. 
 

Your Task:
You don't need to read or print anything. Your task is to complete the function isBipartite() which takes V denoting no.
of vertices and adj denoting adjacency list of graph and returns a boolean value true if graph is bipartite otherwise returns false.
 

Expected Time Complexity: O(V)
Expected Space Complexity: O(V)

// { Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

 // } Driver Code Ends
class Solution {
public:
	
	
	
	
	bool isBipartite(int V, vector<int>adj[]){
	   vector<int> visited(V,-1);
	   queue<int> q;
	   
	   
	   for(int i=0;i<V;i++)
	   {
	       if(visited[i]==-1)
	       {
	   visited[i]=1;
	   q.push(i);
	       }
	   
	   while(!q.empty())
	   {
	       int ele=q.front();
	       q.pop();
	       
	       for(int i=0;i<adj[ele].size();i++)
	       {
	           if(visited[adj[ele][i]]==-1)
	           {
	               visited[adj[ele][i]]=1-visited[ele];
	               q.push(adj[ele][i]);
	               }
	           else if(visited[ele]==visited[adj[ele][i]])
	           {
                return false;
	           }
	           
	       }
	       
	       
	   }
	   
	   }
	   
	   return true;
	    
	}

};

// { Driver Code Starts.
int main(){
	int tc;
	cin >> tc;
	while(tc--){
		int V, E;
		cin >> V >> E;
		vector<int>adj[V];
		for(int i = 0; i < E; i++){
			int u, v;
			cin >> u >> v;
			adj[u].push_back(v);
			adj[v].push_back(u);
		}
		Solution obj;
		bool ans = obj.isBipartite(V, adj);    
		if(ans)cout << "1\n";
		else cout << "0\n";  
	}
	return 0;
}  // } Driver Code Ends

