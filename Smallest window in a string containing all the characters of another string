Given a string S and text T. Output the smallest window in the string S having all characters of the text T. Both the string S and text T contains lowercase english alphabets.

Input:
First line of the input contains an integer T, denoting the number of test cases. Then T test case follows. Each test contains 2 lines having a string S and next line contains text T.

Output:
Output the smallest window of the string containing all the characters of the text. If such window doesn`t exist or this task can not be done then print -1.

Constraints:
1 <= T <= 100
1 <= |N|, |X| <= 1000

Example:
Input:
2
timetopractice
toc
zoomlazapzo
oza

Output:
toprac
apzo

Explanation:
Testcase 1: "toprac" is the smallest substring in the given string S which contains every characters of T.
#include<bits/stdc++.h>
using namespace std;
int main()
 {
   int t;
   cin>>t;
   while(t--)
   {
       string s1,s2;
       cin>>s1>>s2;
       if(s1.length()<s2.length())
       {
        cout<<"-1"<<endl;   
       }
       else
       {
unordered_map<char,int> m1;
unordered_map<char,int> m2;
for(int i=0;i<s2.length();i++)
{
    m2[s2[i]]++;
}
int i=0,count=0,j=0,res=s2.length(),len=0,index=-1,minlen=INT_MAX;
while(i<s1.length())
{
    
    m1[s1[i]]++;
    
    if(m1[s1[i]]<=m2[s1[i]] && m2[s1[i]]!=0)
    {
        count++;
    }
    
    if(count==res)
    {
        
        while(m1[s1[j]]>m2[s1[j]] || m2[s1[j]]==0)
        {
            
            if(m1[s1[j]]>m2[s1[j]])
            {
            m1[s1[j]]--;
            }
            
            j++;
        }
        
        len=i-j+1;
        if(minlen>len)
        {
        minlen=len;
        index=j;
        }
         
        
    }
    
    i++;
           }
       
           if(index==-1)
           cout<<"-1"<<endl;
           else
      cout<<s1.substr(index,minlen)<<endl;
       }
       }
   	return 0;
}
