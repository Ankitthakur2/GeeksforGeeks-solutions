Given a sorted array with possibly duplicate elements, the task is to find indexes of first and last occurrences of an element x in the given array.

Note: If the number x is not found in the array just print '-1'.

Input:
The first line consists of an integer T i.e number of test cases. The first line of each test case contains two integers n and x. The second line contains n spaced integers.

Output:
Print index of the first and last occurrences of the number x with a space in between.

Constraints: 
1<=T<=100
1<=n,a[i]<=1000

Example:
Input:
2
9 5
1 3 5 5 5 5 67 123 125
9 7
1 3 5 5 5 5 7 123 125

Output:
2 5
6 6

#include<bits/stdc++.h>
using namespace std;

int upsearch(int mid,int x,int *arr,int n)
{
    while(arr[mid]==x && mid<n)
    {
        mid++;
    }

    return mid-1;
}


int losearch(int mid,int x,int *arr,int n)
{
    while(arr[mid]==x && mid>-1)
    {
        mid--;
    }
    return mid+1;
}


int main()
 {
	int t;
	cin>>t;
	while(t--)
	{
	    int n,x;
	    cin>>n>>x;
	    int arr[n];
	    for(int i=0;i<n;i++)
	    cin>>arr[i];
	    int lower,upper;
	    int l=0;
	    int r=n-1;
	    int flag=0;
	    while(l<=r)
	    {
	        int mid=l+(r-l)/2;
	        if(arr[mid]==x)
	        {
	            flag=1;
	            upper=upsearch(mid,x,arr,n);
	            lower=losearch(mid,x,arr,n);
	            
	            break;
	        }
	        else if(arr[mid]<x)
	        {
	            l=mid+1;
	        }
	        else if(arr[mid]>x)
	        {
	            r=mid-1;
	        }
	    }
	    
	    if(flag==0)
	    {
	        cout<<"-1"<<endl;
	    }
	    else
	    {
	        cout<<lower<<" "<<upper<<endl;
	    }
	}
	return 0;
}
