Given a string containing lower and uppercase alphabets, the task is to find the maximum number of characters between any two same character in the string.

Input:
The first line of input contains an integer T denoting the number of test cases. Then T test cases follow. Each test case contains a string S.

Output:
For each test case, print the maximum number in new line. If no character repeats, print "-1".

Constraints:
1<=T<=100
1<=|string length|<=105

Example:
Input:
2
socks
FoR
Output:
3
-1
#include<bits/stdc++.h>
using namespace std;
int main()
 {
	int t;
	cin>>t;
	while(t--)
	{
	    string s;
	    cin>>s;
	    int i=0;
	    map<char,int> m;
	   while(i<s.length())
	   {
	       m[s[i]]=i;
	       i++;
	   }
	   
	   int count=0;
	   int j=0;
	    while(j<s.length())
	   {
	       count=max(m[s[j]]-j,count);
	       j++;
	   }
	   
	   
	   
	   cout<<(count-1)<<endl;
	   
	    
	    
	}
	return 0;
}
