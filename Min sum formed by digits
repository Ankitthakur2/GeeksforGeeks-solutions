Given an array of digits (values are from 0 to 9), find the minimum possible sum of two numbers formed from digits of the array. All digits of given array must be used to form the two numbers.

Input:

The first line of input contains an integer T denoting the number of test cases. Then T test cases follow. First line of each test case contains an integer N denoting the size of the array. Next line of each test contains N space seperated integers denoting the elements of the array.
Output:

For each test case output a single line containing the required sum.
Constraints:

1<=T<=100
1<=N<=50
Example:

Input

2
6
6 8 4 5 2 3
5
5 3 0 7 4

Output

604
82

Explanation:

Test Case 1-

The minimum sum is formed by numbers 
358 and 246
Test Case 2 -

The minimum sum is formed by numbers 
35 and 047
#include<bits/stdc++.h>
using namespace std;
int main()
 {
	int t;
	cin>>t;
	while(t--)
	{
	    int n;
	    cin>>n;
	    long long int sum1=0,sum2=0;
	    
	   
	    priority_queue<int,vector<int>,greater<int>> pq;
	    for(int i=0;i<n;i++)
	    {
	        int x;
	        cin>>x;
	        
	        pq.push(x);
	        
	    }
	        
	    
	        
	     while(!pq.empty())
	     {
	         int n1=pq.top();
	         pq.pop();
	         
	         
	         if(!pq.empty())
	         {
	            int n2=pq.top(); 
	         pq.pop();
	         sum2=sum2*10+n2;
	         n2=0;
	         }
	         sum1=sum1*10+n1;
	         
	         
	         n1=0;
	         
	         
	     }
	        
	        cout<<sum1+sum2<<endl;
	}
	return 0;
}
