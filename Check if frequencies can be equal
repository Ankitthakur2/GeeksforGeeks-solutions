Given a string s which contains only lower alphabetic characters, check if it is possible to remove at most one character from this string in such a way that frequency of each distinct character becomes same in the string.

Example 1:

Input:
s = xyyz
Output: 1 
Explanation: Removing one 'y' will make 
frequency of each letter 1.

Example 2:

Input:
s = xxxxyyzz
Output: 0
Explanation: Frequency can not be made same 
same by removing just 1 character.

Your Task:  
You dont need to read input or print anything. Complete the function sameFreq() which takes a string as input parameter and returns a boolean value denoting if same frequency is possible or not.
Note: The driver code print 1 if the value returned is true, otherwise 0.


Expected Time Complexity: O(N) where N is length of str
Expected Auxiliary Space: O(1)


Constraints:
1 <= str.length() <= 104
// { Driver Code Starts
#include <bits/stdc++.h>
using namespace std;


 // } Driver Code Ends


//User function template for C++
class Solution{
public:	
	bool sameFreq(string s)
	{
	    map<char,int> m;
	    int i=0;
	    while(i<s.length())
	    {
	        m[s[i]]++;
	        i++;
	    }
	    
	    set<int> s1;
	    
	    for(auto i=m.begin();i!=m.end();i++)
	    {
	        s1.insert(i->second);
	        
	    }
	if(s1.size()==1)
	return true;
	else if(s1.size()==2)
	{
	    int x,y;
	    x=*(s1.begin());
	    for(auto i=s1.begin();i!=s1.end();i++)
	    {
	        y=(*i);
	    }
	    if(abs(x-y)==1)
	    return true;
	    else if(x==1 || y==1)
	    return true;
	    else if(abs(x-y)>1)
	    false;
	    
	}
	 else if(s.size()>2)
	 return false;
	
	   return false; 
	}
};

// { Driver Code Starts.
int main(){
    int t;
    cin>>t;
    while(t--)
    {
        string s;
        cin>>s;
        Solution ob;
        cout<<ob.sameFreq(s)<<endl;
    }
}


  // } Driver Code Ends
