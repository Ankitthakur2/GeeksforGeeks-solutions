Given a sorted and rotated array A of N distinct elements which is rotated at some point, and given an element K. The task is to find the index of the given element K in the array A.

Example 1:

Input:
N = 9
A[] = {5 6,7,8,9,10,1,2,3}
K = 10
Output: 5
Explanation: 10 is found at index 5.
Example 1:

Input:
N = 3
A[] = {3,1,2}
K = 1
Output: 1
User Task:
Complete Search() function and return the index of the element K if found in the array. If the element is not present, then return -1.

Expected Time Complexity: O(log N).
Expected Auxiliary Space: O(1).

Constraints:
1 ≤ N ≤ 10^7
0 ≤ Ai ≤ 10^8
1 ≤ K ≤ 10^8


// { Driver Code Starts
//Initial template for C++

#include<bits/stdc++.h>
using namespace std;

int Search(vector<int> ,int );

//User code will be pasted here

int main(){

    int t;
    cin >> t;

    while(t--){
        int n;
        cin >> n;
        
        vector<int> vec(n);
        
        for(int i =0;i<n;i++) 
            cin >> vec[i];
        
        int target;
        cin >> target;
        
        cout << Search(vec,target) << "\n";
         
    }
}// } Driver Code Ends


//User function template for C++

// vec : given vector of elements
// K : given value whose index we need to find 

int binarysearch(vector<int> &vec,int K,int l,int r)
{
    
      
        while(l<=r)
        {
            int mid=l+(r-l)/2;
            if(vec[mid]==K)
            return mid;
            else if(vec[mid]>K)
            {
                r=mid-1;
            }
            
            else if(vec[mid]<K)
            {
               l=mid+1; 
                
            }
        }
 return -1;   
}
int Search(vector<int> vec, int K) {
     if(vec[0]<=vec[vec.size()-1])
    {
      int l=0;
        int r=vec.size()-1;
       int res= binarysearch(vec,K,l,r);
        return res;
    }
    
    else
    {
        
        int l=0;
        int r=vec.size()-1;
        
        while(l<=r)
        {
            
            int mid=l+(r-l)/2;
            if(vec[mid]==K)
            return mid;
            if(vec[mid-1]>vec[mid])
            {
                int res;
               if(vec[0]>K)
                 res=binarysearch(vec,K,mid,vec.size()-1);
                else 
                res= binarysearch(vec,K,0,mid-1);
            
             return res;
            }
            else if(vec[mid]>vec[r])
            {
                l=mid+1;
            }
            
            else if(vec[mid]<vec[r])
            {
               r=mid-1; 
            }
        }
    }
    
}
