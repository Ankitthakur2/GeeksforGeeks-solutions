Given an undirected graph with V vertices and E edges, check whether it contains any cycle or not. 

Example 1:

Input:   

Output: 1
Explanation: 1->2->3->4->1 is a cycle.
Example 2:

Input: 

Output: 0
Explanation: No cycle in the graph.
 

Your Task:
You don't need to read or print anything. Your task is to complete the function isCycle() which takes V denoting the number of vertices and adjacency list as input parameters and returns a boolean value denoting if the undirected graph contains any cycle or not.
 

Expected Time Complexity: O(V + E)
Expected Space Complexity: O(V)
 

Constraints:
1 ≤ V, E ≤ 10^5


// { Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

 // } Driver Code Ends
class Solution {
public:

bool bfs(vector<int> v[],int src,int n,int count[])
{
    queue<pair<int,int>> q;
    
   
    q.push({src,-1});
    count[src]=1;
    
    while(!q.empty())
    {
        pair<int,int> x=q.front();
        int parent=x.second;
        int curr=x.first;
        q.pop();
         
        for(auto i=v[curr].begin();i!=v[curr].end();i++)
        {
           if(*i==parent)
           continue;
           else if(count[*i]==1)
            return true;
          
                q.push({*i,curr});
                count[*i]=1;
        }
    }
    
    return false;
    
}


	bool isCycle(int V, vector<int>adj[]){
	    
	      int count[V];
	     int parent[V];
    for(int i=0;i<V;i++)
    {
        count[i]=0;
    }
	    for(int i=0;i<V;i++)
	    {
	        if(count[i]!=1)
	        {
	           bool r= bfs(adj,i,V,count);
	            if(r)
	            return true;
	        }
	    }
	    
	    return false;
	    
	}
};

// { Driver Code Starts.
int main(){
	int tc;
	cin >> tc;
	while(tc--){
		int V, E;
		cin >> V >> E;
		vector<int>adj[V];
		for(int i = 0; i < E; i++){
			int u, v;
			cin >> u >> v;
			adj[u].push_back(v);
			adj[v].push_back(u);
		}
		Solution obj;
		bool ans = obj.isCycle(V, adj);
		if(ans)
			cout << "1\n";
		else cout << "0\n";
	}
	return 0;
}  // } Driver Code Ends
